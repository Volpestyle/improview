name: CI/CD

on:
  pull_request:
  push:
    branches:
      - main
      - release-*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    name: Lint, test, and build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Set writable Go build cache
        run: |
          mkdir -p .cache/go-build
          echo "GOCACHE=$PWD/.cache/go-build" >> "$GITHUB_ENV"
      - uses: actions/setup-go@v5
        with:
          go-version-file: backend/go.mod
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install pnpm and CDK CLI
        run: npm install -g pnpm@9 aws-cdk@2
      - name: Install dependencies
        run: pnpm install --dir infra/cdk
      - name: Backend tests
        run: go test ./...
        working-directory: backend
      - name: Lint
        run: pnpm --dir infra/cdk run --if-present lint
      - name: Unit tests
        run: pnpm --dir infra/cdk run --if-present test
      - name: Build
        run: pnpm --dir infra/cdk run --if-present build
      - name: Upload build artifact
        if: success() && github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: |
            dist
            apps/web/dist
          if-no-files-found: ignore

  deploy:
    name: Deploy to AWS
    needs: quality
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release-')
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment:
      name: production
    permissions:
      contents: read
      id-token: write
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      S3_BUCKET: ${{ vars.AWS_S3_BUCKET }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ vars.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
      FRONTEND_BUILD_DIR: ${{ vars.FRONTEND_BUILD_DIR }}
      IMPROVIEW_ENV: ${{ vars.IMPROVIEW_ENV }}
      BASE_URL: ${{ vars.BASE_URL }}
      GOOGLE_CLIENT_ID: ${{ vars.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SCOPES: ${{ vars.GOOGLE_CLIENT_SCOPES }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SMOKE_USER: ${{ secrets.SMOKE_USER != '' && secrets.SMOKE_USER || vars.SMOKE_USER != '' && vars.SMOKE_USER || 'smoke-tester@improview.dev' }}
      SMOKE_PASSWORD: ${{ secrets.SMOKE_PASSWORD != '' && secrets.SMOKE_PASSWORD || vars.SMOKE_PASSWORD != '' && vars.SMOKE_PASSWORD || 'AutoSmoke!2345' }}
      COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID != '' && secrets.COGNITO_USER_POOL_ID || vars.COGNITO_USER_POOL_ID }}
      SMOKE_SECRET_NAME: ${{ vars.SMOKE_SECRET_NAME != '' && vars.SMOKE_SECRET_NAME || (vars.IMPROVIEW_ENV != '' && format('improview/{0}/smoke-credentials', vars.IMPROVIEW_ENV) || 'improview/dev/smoke-credentials') }}
      SMOKE_SECRET_DESCRIPTION: ${{ vars.SMOKE_SECRET_DESCRIPTION != '' && vars.SMOKE_SECRET_DESCRIPTION || 'Cognito smoke-test credentials' }}
    steps:
      - name: Determine deployment eligibility
        id: deployment_guard
        run: |
          should_deploy="false"
          if [ -n "${AWS_ROLE_TO_ASSUME}" ]; then
            should_deploy="true"
          elif [ -n "${AWS_ACCESS_KEY_ID}" ] && [ -n "${AWS_SECRET_ACCESS_KEY}" ]; then
            should_deploy="true"
          fi
          echo "should_deploy=${should_deploy}" >> "$GITHUB_OUTPUT"
      - uses: actions/checkout@v4
        if: steps.deployment_guard.outputs.should_deploy == 'true'
      - uses: actions/setup-node@v4
        if: steps.deployment_guard.outputs.should_deploy == 'true'
        with:
          node-version: 20
      - name: Install pnpm and CDK CLI
        if: steps.deployment_guard.outputs.should_deploy == 'true'
        run: npm install -g pnpm@9 aws-cdk@2
      - name: Install dependencies
        if: steps.deployment_guard.outputs.should_deploy == 'true'
        run: pnpm install --dir infra/cdk
      - name: Build application
        if: steps.deployment_guard.outputs.should_deploy == 'true'
        run: pnpm --dir infra/cdk run build
      - name: Configure AWS credentials via OIDC
        if: steps.deployment_guard.outputs.should_deploy == 'true' && env.AWS_ROLE_TO_ASSUME != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION != '' && env.AWS_REGION || 'us-east-1' }}
      - name: Configure AWS credentials via static keys
        if: steps.deployment_guard.outputs.should_deploy == 'true' && env.AWS_ROLE_TO_ASSUME == ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION != '' && env.AWS_REGION || 'us-east-1' }}
      - name: Sync static assets to S3
        if: steps.deployment_guard.outputs.should_deploy == 'true' && env.S3_BUCKET != ''
        run: |
          build_dir="${FRONTEND_BUILD_DIR:-apps/web/dist}"
          if [ ! -d "$build_dir" ] && [ -d dist ]; then
            build_dir=dist
          fi
          aws s3 sync "$build_dir" "s3://$S3_BUCKET" --delete
      - name: Invalidate CloudFront cache
        if: steps.deployment_guard.outputs.should_deploy == 'true' && env.CLOUDFRONT_DISTRIBUTION_ID != ''
        run: aws cloudfront create-invalidation --distribution-id "$CLOUDFRONT_DISTRIBUTION_ID" --paths "/*"
      - name: Deploy serverless services
        if: steps.deployment_guard.outputs.should_deploy == 'true'
        run: pnpm --dir infra/cdk run deploy:services -- --env "${IMPROVIEW_ENV:-dev}"
      - name: Ensure smoke-test Cognito user
        if: steps.deployment_guard.outputs.should_deploy == 'true'
        env:
          NO_COLOR: "1"
        shell: bash
        run: |
          set -euo pipefail
          if [ "${COGNITO_USER_POOL_ID:-}" = "" ]; then
            echo "Smoke user setup failed; COGNITO_USER_POOL_ID is required." >&2
            exit 1
          fi
          args=(--env "${IMPROVIEW_ENV:-dev}" --user "${SMOKE_USER}" --user-pool-id "${COGNITO_USER_POOL_ID}")
          if [ -n "${AWS_REGION:-}" ]; then
            args+=(--region "${AWS_REGION}")
          fi
          args+=(--password "${SMOKE_PASSWORD}")
          args+=(--secret-name "${SMOKE_SECRET_NAME}")
          args+=(--description "${SMOKE_SECRET_DESCRIPTION}")
          ./backend/scripts/setup-smoke-user.sh "${args[@]}"
      - name: Resolve API endpoint
        id: resolve_api_endpoint
        if: steps.deployment_guard.outputs.should_deploy == 'true'
        run: |
          env_name="${IMPROVIEW_ENV:-dev}"
          region="${AWS_REGION:-us-east-1}"
          stack_name="Improview-${env_name}-Backend"
          echo "Resolving ApiEndpoint from ${stack_name} in ${region}..."
          endpoint=$(aws cloudformation describe-stacks \
            --region "${region}" \
            --stack-name "${stack_name}" \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
            --output text)
          if [ -z "${endpoint}" ] || [ "${endpoint}" = "None" ]; then
            echo "Failed to resolve ApiEndpoint output for ${stack_name}." >&2
            exit 1
          fi
          echo "Resolved ApiEndpoint: ${endpoint}"
          echo "BASE_URL=${endpoint}" >> "${GITHUB_ENV}"
          echo "base_url=${endpoint}" >> "${GITHUB_OUTPUT}"
      - name: Set writable Go build cache
        if: steps.deployment_guard.outputs.should_deploy == 'true' && steps.resolve_api_endpoint.outputs.base_url != ''
        run: |
          mkdir -p .cache/go-build
          echo "GOCACHE=$PWD/.cache/go-build" >> "$GITHUB_ENV"
      - uses: actions/setup-go@v5
        if: steps.deployment_guard.outputs.should_deploy == 'true' && steps.resolve_api_endpoint.outputs.base_url != ''
        with:
          go-version-file: backend/go.mod
      - name: Run live API smoke tests
        if: steps.deployment_guard.outputs.should_deploy == 'true' && steps.resolve_api_endpoint.outputs.base_url != ''
        run: go test ./internal/api -run Live -v
        working-directory: backend
      - name: Skip deployment (missing AWS credentials)
        if: steps.deployment_guard.outputs.should_deploy != 'true'
        run: echo "AWS credentials not configured; skipping deploy."

  deploy_dev:
    name: Deploy to AWS (dev)
    needs: quality
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment:
      name: dev
    permissions:
      contents: read
      id-token: write
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      S3_BUCKET: ${{ vars.AWS_S3_BUCKET }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ vars.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
      FRONTEND_BUILD_DIR: ${{ vars.FRONTEND_BUILD_DIR }}
      IMPROVIEW_ENV: ${{ vars.IMPROVIEW_ENV }}
      BASE_URL: ${{ vars.BASE_URL }}
      GOOGLE_CLIENT_ID: ${{ vars.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SCOPES: ${{ vars.GOOGLE_CLIENT_SCOPES }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SMOKE_USER: ${{ secrets.SMOKE_USER != '' && secrets.SMOKE_USER || vars.SMOKE_USER != '' && vars.SMOKE_USER || 'smoke-tester@improview.dev' }}
      SMOKE_PASSWORD: ${{ secrets.SMOKE_PASSWORD != '' && secrets.SMOKE_PASSWORD || vars.SMOKE_PASSWORD != '' && vars.SMOKE_PASSWORD || 'AutoSmoke!2345' }}
      COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID != '' && secrets.COGNITO_USER_POOL_ID || vars.COGNITO_USER_POOL_ID }}
      SMOKE_SECRET_NAME: ${{ vars.SMOKE_SECRET_NAME != '' && vars.SMOKE_SECRET_NAME || (vars.IMPROVIEW_ENV != '' && format('improview/{0}/smoke-credentials', vars.IMPROVIEW_ENV) || 'improview/dev/smoke-credentials') }}
      SMOKE_SECRET_DESCRIPTION: ${{ vars.SMOKE_SECRET_DESCRIPTION != '' && vars.SMOKE_SECRET_DESCRIPTION || 'Cognito smoke-test credentials' }}
    steps:
      - name: Determine deployment eligibility
        id: dev_deployment_guard
        run: |
          should_deploy="false"
          if [ -n "${AWS_ROLE_TO_ASSUME}" ]; then
            should_deploy="true"
          elif [ -n "${AWS_ACCESS_KEY_ID}" ] && [ -n "${AWS_SECRET_ACCESS_KEY}" ]; then
            should_deploy="true"
          fi
          echo "should_deploy=${should_deploy}" >> "$GITHUB_OUTPUT"
      - uses: actions/checkout@v4
        if: steps.dev_deployment_guard.outputs.should_deploy == 'true'
      - uses: actions/setup-node@v4
        if: steps.dev_deployment_guard.outputs.should_deploy == 'true'
        with:
          node-version: 20
      - name: Install pnpm and CDK CLI
        if: steps.dev_deployment_guard.outputs.should_deploy == 'true'
        run: npm install -g pnpm@9 aws-cdk@2
      - name: Install dependencies
        if: steps.dev_deployment_guard.outputs.should_deploy == 'true'
        run: pnpm install --dir infra/cdk
      - name: Build application
        if: steps.dev_deployment_guard.outputs.should_deploy == 'true'
        run: pnpm --dir infra/cdk run build
      - name: Configure AWS credentials via OIDC
        if: steps.dev_deployment_guard.outputs.should_deploy == 'true' && env.AWS_ROLE_TO_ASSUME != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION != '' && env.AWS_REGION || 'us-east-1' }}
      - name: Configure AWS credentials via static keys
        if: steps.dev_deployment_guard.outputs.should_deploy == 'true' && env.AWS_ROLE_TO_ASSUME == ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION != '' && env.AWS_REGION || 'us-east-1' }}
      - name: Sync static assets to S3
        if: steps.dev_deployment_guard.outputs.should_deploy == 'true' && env.S3_BUCKET != ''
        run: |
          build_dir="${FRONTEND_BUILD_DIR:-apps/web/dist}"
          if [ ! -d "$build_dir" ] && [ -d dist ]; then
            build_dir=dist
          fi
          aws s3 sync "$build_dir" "s3://$S3_BUCKET" --delete
      - name: Invalidate CloudFront cache
        if: steps.dev_deployment_guard.outputs.should_deploy == 'true' && env.CLOUDFRONT_DISTRIBUTION_ID != ''
        run: aws cloudfront create-invalidation --distribution-id "$CLOUDFRONT_DISTRIBUTION_ID" --paths "/*"
      - name: Deploy serverless services
        if: steps.dev_deployment_guard.outputs.should_deploy == 'true'
        run: pnpm --dir infra/cdk run deploy:services -- --env "${IMPROVIEW_ENV:-dev}"
      - name: Ensure smoke-test Cognito user
        if: steps.dev_deployment_guard.outputs.should_deploy == 'true'
        env:
          NO_COLOR: "1"
        shell: bash
        run: |
          set -euo pipefail
          if [ "${COGNITO_USER_POOL_ID:-}" = "" ]; then
            echo "Smoke user setup failed; COGNITO_USER_POOL_ID is required." >&2
            exit 1
          fi
          args=(--env "${IMPROVIEW_ENV:-dev}" --user "${SMOKE_USER}" --user-pool-id "${COGNITO_USER_POOL_ID}")
          if [ -n "${AWS_REGION:-}" ]; then
            args+=(--region "${AWS_REGION}")
          fi
          args+=(--password "${SMOKE_PASSWORD}")
          args+=(--secret-name "${SMOKE_SECRET_NAME}")
          args+=(--description "${SMOKE_SECRET_DESCRIPTION}")
          ./backend/scripts/setup-smoke-user.sh "${args[@]}"
      - name: Resolve API endpoint
        id: resolve_api_endpoint
        if: steps.dev_deployment_guard.outputs.should_deploy == 'true'
        run: |
          env_name="${IMPROVIEW_ENV:-dev}"
          region="${AWS_REGION:-us-east-1}"
          stack_name="Improview-${env_name}-Backend"
          echo "Resolving ApiEndpoint from ${stack_name} in ${region}..."
          endpoint=$(aws cloudformation describe-stacks \
            --region "${region}" \
            --stack-name "${stack_name}" \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' \
            --output text)
          if [ -z "${endpoint}" ] || [ "${endpoint}" = "None" ]; then
            echo "Failed to resolve ApiEndpoint output for ${stack_name}." >&2
            exit 1
          fi
          echo "Resolved ApiEndpoint: ${endpoint}"
          echo "BASE_URL=${endpoint}" >> "${GITHUB_ENV}"
          echo "base_url=${endpoint}" >> "${GITHUB_OUTPUT}"
      - name: Set writable Go build cache
        if: steps.dev_deployment_guard.outputs.should_deploy == 'true' && steps.resolve_api_endpoint.outputs.base_url != ''
        run: |
          mkdir -p .cache/go-build
          echo "GOCACHE=$PWD/.cache/go-build" >> "$GITHUB_ENV"
      - uses: actions/setup-go@v5
        if: steps.dev_deployment_guard.outputs.should_deploy == 'true' && steps.resolve_api_endpoint.outputs.base_url != ''
        with:
          go-version-file: backend/go.mod
      - name: Run live API smoke tests
        if: steps.dev_deployment_guard.outputs.should_deploy == 'true' && steps.resolve_api_endpoint.outputs.base_url != ''
        run: go test ./internal/api -run Live -v
        working-directory: backend
      - name: Skip deployment (missing AWS credentials)
        if: steps.dev_deployment_guard.outputs.should_deploy != 'true'
        run: echo "AWS credentials not configured; skipping deploy."
