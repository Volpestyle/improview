name: Deploy Dev

on:
  workflow_dispatch:
    inputs:
      ref:
        description: Branch or tag to deploy (defaults to GitHub ref)
        required: false
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - labeled

concurrency:
  group: deploy-dev-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: false

jobs:
  deploy-dev:
    name: Deploy CDK stacks to dev
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' &&
       contains(github.event.pull_request.labels.*.name, 'deploy-dev'))
    environment: dev
    permissions:
      contents: read
      id-token: write
    env:
      AWS_REGION: ${{ vars.DEV_AWS_REGION || vars.AWS_REGION || '' }}
      S3_BUCKET: ${{ vars.DEV_AWS_S3_BUCKET || vars.AWS_S3_BUCKET || '' }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ vars.DEV_AWS_CLOUDFRONT_DISTRIBUTION_ID || vars.AWS_CLOUDFRONT_DISTRIBUTION_ID || '' }}
      FRONTEND_BUILD_DIR: ${{ vars.DEV_FRONTEND_BUILD_DIR || vars.FRONTEND_BUILD_DIR || '' }}
      IMPROVIEW_LIVE_BASE_URL: ${{ vars.DEV_IMPROVIEW_LIVE_BASE_URL || vars.IMPROVIEW_LIVE_BASE_URL || '' }}
      IMPROVIEW_ENV: dev
      AWS_ROLE_TO_ASSUME: ${{ secrets.DEV_AWS_ROLE_TO_ASSUME || secrets.AWS_ROLE_TO_ASSUME || '' }}
      AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ACCESS_KEY_ID || secrets.AWS_ACCESS_KEY_ID || '' }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY || secrets.AWS_SECRET_ACCESS_KEY || '' }}
    steps:
      - name: Determine deployment eligibility
        id: deployment_guard
        run: |
          should_deploy="false"
          if [ -n "${AWS_ROLE_TO_ASSUME}" ]; then
            should_deploy="true"
          elif [ -n "${AWS_ACCESS_KEY_ID}" ] && [ -n "${AWS_SECRET_ACCESS_KEY}" ]; then
            should_deploy="true"
          fi
          echo "should_deploy=${should_deploy}" >> "$GITHUB_OUTPUT"
      - uses: actions/checkout@v4
        if: steps.deployment_guard.outputs.should_deploy == 'true'
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || (inputs.ref != '' && inputs.ref || github.ref) }}
      - uses: actions/setup-node@v4
        if: steps.deployment_guard.outputs.should_deploy == 'true'
        with:
          node-version: 20
      - name: Install pnpm and CDK CLI
        if: steps.deployment_guard.outputs.should_deploy == 'true'
        run: npm install -g pnpm@9 aws-cdk@2
      - name: Install dependencies
        if: steps.deployment_guard.outputs.should_deploy == 'true'
        run: pnpm install --dir infra/cdk
      - name: Build CDK app
        if: steps.deployment_guard.outputs.should_deploy == 'true'
        run: pnpm --dir infra/cdk run build
      - name: Configure AWS credentials via OIDC
        if: steps.deployment_guard.outputs.should_deploy == 'true' && env.AWS_ROLE_TO_ASSUME != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.DEV_AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION != '' && env.AWS_REGION || 'us-east-1' }}
      - name: Configure AWS credentials via static keys
        if: steps.deployment_guard.outputs.should_deploy == 'true' && env.AWS_ROLE_TO_ASSUME == ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION != '' && env.AWS_REGION || 'us-east-1' }}
      - name: Sync static assets to S3
        if: steps.deployment_guard.outputs.should_deploy == 'true' && env.S3_BUCKET != ''
        run: |
          build_dir="${FRONTEND_BUILD_DIR:-apps/web/dist}"
          if [ ! -d "$build_dir" ] && [ -d dist ]; then
            build_dir=dist
          fi
          aws s3 sync "$build_dir" "s3://$S3_BUCKET" --delete
      - name: Invalidate CloudFront cache
        if: steps.deployment_guard.outputs.should_deploy == 'true' && env.CLOUDFRONT_DISTRIBUTION_ID != ''
        run: aws cloudfront create-invalidation --distribution-id "$CLOUDFRONT_DISTRIBUTION_ID" --paths "/*"
      - name: Deploy serverless services
        if: steps.deployment_guard.outputs.should_deploy == 'true'
        run: pnpm --dir infra/cdk run deploy:services
      - uses: actions/setup-go@v5
        if: steps.deployment_guard.outputs.should_deploy == 'true' && env.IMPROVIEW_LIVE_BASE_URL != ''
        with:
          go-version-file: backend/go.mod
      - name: Run live API smoke tests
        if: steps.deployment_guard.outputs.should_deploy == 'true' && env.IMPROVIEW_LIVE_BASE_URL != ''
        run: go test ./internal/api -run Live -v
        working-directory: backend
      - name: Skip deployment (missing AWS credentials)
        if: steps.deployment_guard.outputs.should_deploy != 'true'
        run: echo "Dev AWS credentials not configured; skipping deploy."
